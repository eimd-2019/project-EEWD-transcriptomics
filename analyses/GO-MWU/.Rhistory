8+5
1:250
print("hello world!")
x <- 1:5
x
y <- c(6, 7, 8, 9, 10)
y
a  <-  b <- c <- 3
x + y
rm(list = ls())
install.packages("ggplot2")
require("ggplot")
require("ggplot2")
trends.txt  <- read.table("~/Downloads/R/GoogleTrends.txt", header = TRUE, sep = "\t")
View(trends.txt)
trends.csv  <- read.csv("~Downloads/R/GoogleTrends.csv", header = TRUE)
trends.csv  <- read.csv("~/Downloads/R/GoogleTrends.csv", header = TRUE)
View(trends.csv)
View(trends.csv)
str(trends.csv)
log(x = 10, base = 10)
log(10)
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("RColorBrewer", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
#--Question 2a
#--Question 2a
#--Question 2a
#--Question 2a
seq?
?seq
seq(from -1 to 1, length.out = 100)
seq(from -1, to 1, length.out = 100)
seq(from -1, to 1, length.out=100)
seq(from -1 to 1, length.out=100)
seq(from -1, to 1, length.out=100)
seq(-1, 1, length.out=100)
x <-- seq(-1, 1, length.out=100)
exp(x/2)
y <-- exp(x/2)
y[y > 1]
y > 1
y[y > 1]
rep("Small", "Medium", "Large", each = 5)
size.nonfac <-- c("Small", "Small", "Small", "Small", "Small", "Medium", "Medium", "Medium","Medium", "Medium", "Large", "Large", "Large", "Large", "Large")
x <- seq(-1, 1, length.out=100)
y <- exp(x/2)
y[y > 1]
which(y > 1)
length(y > 1)
y > 1
sum(y > 1)
size.nonfac <- c("Small", "Small", "Small", "Small", "Small", "Medium", "Medium", "Medium","Medium", "Medium", "Large", "Large", "Large", "Large", "Large")
size <- factor(size.nonfac)
unknown.nonfac <- c("Unknown", "Unknown")
unknown <- factor(unknown.nonfac)
rbind(size, unknwon)
rbind(size, unknown)
size.nonfac <-rep(1:3, each = 5)
size <- factor(size.nonfac, labels=c("Small", "Medium", "Large")
size <- factor(size.nonfac, labels=c("Small", "Medium", "Large"))
size <- factor(size, labels = c("Small", "Medium", "Large"))
unknown.nonfac <- rep(1, each = 2)
size <- factor(size.nonfac, labels = c("Small", "Medium", "Large"))
unknown <- factor(unknown.nonfac, labels = c("Unknown"))
rbind(size, unknown)
head(size)
str(size)
c(size, unknown)
unknown.nonfac <- rep(4, each = 2)
unknown <- factor(unknown.nonfac, labels = c("Unknown"))
c(size, unknown)
c(size.nonfac, unknown.nonfac)
size <- factor(size.nonfac, labels = c("Small", "Medium", "Large"))
observedSize.nonfac <- c(size.nonfac, unknown.nonfac)
observedSize <- factor(observedSize.nonfac, labels = c("Small", "Medium", "Large", "Unknwon"))
str(observedSize)
observedSize.nonfac <- c(size.nonfac, unknown.nonfac)
str(observedSize.nonfac)
observedSize.nonfac
observedSize
unknown.nonfac <- rep(4, each = 2)
observedSize.nonfac <- c(size.nonfac, unknown.nonfac)
observedSize <- factor(observedSize.nonfac, labels = c("Small", "Medium", "Large", "Unknwon"))
observedSize
read.table(file = "fishPassage.csv", header = T, sep = ",", skip = 0, na.strings = NA)
x <- seq(-1, 1, length.out=100) #create sequence with length of 100 values
y <- exp(x/2)
sum(y > 1) #add values together that are "TRUE" for y > 1
size.nonfac <-rep(1:3, each = 5) #create vector
size <- factor(size.nonfac, labels = c("Small", "Medium", "Large")) #exchange numbers for small, medium and large
size #view final vector with labelled factors
unknown.nonfac <- rep(4, each = 2) #create vector with new values
observedSize.nonfac <- c(size.nonfac, unknown.nonfac) #combine both vectors with unlabelled factors
observedSize <- factor(observedSize.nonfac, labels = c("Small", "Medium", "Large", "Unknwon")) #label factors
observedSize #view final vector with labelled factors
fishPassage <- read.csv(file = "fishPassage.csv", header = T, sep = ",", na.strings = "NA")
str(bonnevilleDam.data) #confirm dataframe structure
bonnevilleDam.data <- fishPassage[fishPassage$Dam == "BON",] #create new dataframe for just BON data
fishPassage <- read.csv(file = "fishPassage.csv", header = T, sep = ",", na.strings = "NA")
read.csv(file = "ScrapData.csv", header = TRUE)
install.packages("HH")
library(HH)
?HH
case(cholesterolModel)
cholesterolData <- read.csv(file = "homework_2.csv") #Import data
cholesterolModel <- lm(cholesterol ~ calcium, data = cholesterolData)
proteinAreas <- read.csv("2017-06-10-protein-areas-only-error-checked.csv", na.strings = "#N/A") #Specify Skyline's special way of designating N/A values
dir.create("../Downloads/2017-Geoduck-SRM-raw/")
dir.create("../Downloads/2017-Geoduck-SRM-raw/")
?dir.create
dir.create(path = "../Downloads/2017-Geoduck-SRM-raw/")
dir.create("../Guest/Downloads/2017-Geoduck-SRM-raw")
dir.create("./Downloads/2017-Geoduck-SRM-raw")
getwd()
histologyData <- read.csv("Documents/project-oyster-oa/analyses/Manchester_Gonad_Histology/2018-02-27-Histology-Classification-Analyses.R")
histologyData <- read.csv("Documents/project-oyster-oa/data/Manchester/2018-02-27-Gigas-Histology-Classification.csv")
head(histologyData)
histologyData$Mature <- rep(0, nrow(histology$Mature))
histologyData$Mature <- rep(0, nrow(histologDatay$Mature))
histologyData$Mature <- rep(0, nrow(histologData$Mature))
histologyData$Mature <- rep(0, nrow(histologyData$Mature))
histologyData$Mature <- rep(0, length(histologyData$Mature))
histologyData$Mature <- rep(0, nrow(histologyData))
histologyData$Mature[which(histologyData$Stage>=mature.stage)]<-rep(1, length(which(histologyData$Stage>=mature.stage)))
mature.stage <- 3
histologyData$Mature[which(histologyData$Stage>=mature.stage)]<-rep(1, length(which(histologyData$Stage>=mature.stage)))
histologyData
View(histologyData)
View(histologyData)
histologyData$Treatment <- c(rep("Ambient", times = 20), rep("Low", times = 10), rep("Ambient", times = 10))
mature.glm <- glm(Mature ~ Treatment * Pre.or.Post.OA, data = histologyData, family = binomial)
summary(mature.glm)
mature.glm <- glm(Mature ~ Treatment + Pre.or.Post.OA, data = histologyData, family = binomial)
summary(mature.glm)
getwd()
getwd()
#### AVERAGE TECHNICAL REPLICATES ####
#After examining how my technical replicates are clustering together, I will average and proceed with an ANOSIM and NMDS
head(SRMDataNMDSNonNormalizedPivotedCorrected) #Dataset I'll use to average technical replicates, from my first R script (NMDS for Technical Replication)
SRMDataNMDSNonNormalizedAveraged <- data.frame(x = rep(x = 0, times = 111),
y = rep(x = 0, times = 111)) #Create an empty dataframe to store averaged values
row.names(SRMDataNMDSNonNormalizedAveraged) <- SRMDataNMDSNonNormalizedPivotedCorrected$RowNames #Add row names
head(SRMDataNMDSNonNormalizedAveraged) #Confirm changes
for(i in 1:(length(SRMDataNMDSNonNormalizedPivotedCorrected)-1)) { #Average normalized area values for consecutive columns
SRMDataNMDSNonNormalizedAveraged[,i] <- (SRMDataNMDSNonNormalizedPivotedCorrected[,i]+SRMDataNMDSNonNormalizedPivotedCorrected[,i+1])/2
}
head(SRMDataNMDSNonNormalizedAveraged) #Confirm averaging
SRMDataNMDSNonNormalizedAveraged <- SRMDataNMDSNonNormalizedAveraged[seq(from = 1, to = (length(SRMDataNMDSNonNormalizedPivotedCorrected)-1), by = 2)] #Remove even-numbered columns, since those consecutive columns are not technical replicates
head(SRMDataNMDSNonNormalizedAveraged) #Confirm column removal
colnames(SRMDataNMDSNonNormalizedAveraged) <- technicalReplicates[seq(from = 1, to = (length(SRMDataNMDSNonNormalizedPivotedCorrected)-1), by = 2)] #Add column names
colnames(SRMDataNMDSNonNormalizedAveraged) #Confirm column naming
library(devtools)
install.packages("devtools")
library(devtools)
install_github('andreacirilloac/updateR')
library(updateR)
updateR(admin_password = 'partyatmyhouse')
partyatmyhouse
version
citation()
citation("oce")
install.packages("oce")
citation("oce")
citation("prop.test")
prop.test(citation)
citation(seacarb)
library(seacarb)
install.packages(seacarb)
install.packages("seacarb")
library(seacarb)
citation(seacarb)
citation("seacarb")
# Edit these to match your data file names:
input="heats.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="amil_defog_iso2go.tab" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="MF" # either MF, or BP, or CC
source("gomwu.functions.R")
setwd("Documents/project-EWD-transcriptomics/analyses/GO-MWU/")
# Edit these to match your data file names:
input="heats.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="amil_defog_iso2go.tab" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="MF" # either MF, or BP, or CC
source("gomwu.functions.R")
goDivision="BP" # either MF, or BP, or CC
# Calculating stats. It might take ~3 min for MF and BP. Do not rerun it if you just want to replot the data with different cutoffs, go straight to gomwuPlot. If you change any of the numeric values below, delete the files that were generated in previos runs first.
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25 # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
# Plotting results
quartz()
results=gomwuPlot(input,goAnnotations,goDivision,
#	absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes". Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
absValue=1,
level1=0.1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.05, # FDR cutoff to print in regular (not italic) font.
level3=0.01, # FDR cutoff to print in large bold font.
txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5 # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
getwd()
# Edit these to match your data file names:
input="2019-07-11-Zostera-Table-of-Significance-Measures.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="2019-07-11-Zostera-GO-Annotations-Table.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
# Calculating stats. It might take ~3 min for MF and BP. Do not rerun it if you just want to replot the data with different cutoffs, go straight to gomwuPlot. If you change any of the numeric values below, delete the files that were generated in previos runs first.
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25 # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
getwd()
input="2019-07-11-Zostera-Table-of-Significance-Measures.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="2019-07-11-Zostera-GO-Annotations-Table.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
goAnnotations="2019-07-11-Zostera-GO-Annotations-Table.tab" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
# Calculating stats. It might take ~3 min for MF and BP. Do not rerun it if you just want to replot the data with different cutoffs, go straight to gomwuPlot. If you change any of the numeric values below, delete the files that were generated in previos runs first.
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25 # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
input="2019-07-11-Zostera-Table-of-Significance-Measures.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="2019-07-11-Zostera-GO-Annotations-Table.tab" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
# Calculating stats. It might take ~3 min for MF and BP. Do not rerun it if you just want to replot the data with different cutoffs, go straight to gomwuPlot. If you change any of the numeric values below, delete the files that were generated in previos runs first.
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25 # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
# do not continue if the printout shows that no GO terms pass 10% FDR.
